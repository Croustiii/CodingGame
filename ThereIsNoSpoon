using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    /// <summary>
    /// There is No Spoon Solution
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {

            //// VoxCodei Solution 
            //// Test

            SpoonProcessor Sp = new SpoonProcessor(5,2);

            string s1 = "0.0.0";
            string s2 = "..0..";
            //string s3 = "..0.0.0";
            //string s4 = "..0....";
            //string s5 = "0.0.00.";
            //string s6 = ".......";
            //string s7 = "....00.";

            //Mapper le terrain
            Sp.MapLine(s1);

            Sp.MapLine(s2);
            //Sp.MapLine(s3);
            //Sp.MapLine(s4);
            //Sp.MapLine(s5);
            //Sp.MapLine(s6);
            //Sp.MapLine(s7);

            // Afficher chaque point du terrain, ses valeurs et coordonn√©es
            // Sp.Display();


            // Boucle de jeu
            Console.Error.WriteLine();
            Sp.Display();
            Console.WriteLine();
            Sp.FindNeighbour();

            Console.Error.WriteLine();


            Console.ReadLine();




        }
    }

    public class point
    {
        public int X { get; set; }
        public int Y { get; set; }

        public bool IsNode;

        public point(int x, int y)
        {
            X = x;
            Y = y;
        }

        public point(int x, int y, bool node)
            : this(x, y)
        {
            IsNode = node;
        }
    }

    public class SpoonProcessor
    {
        //largeur du terrain = nombre de colonnes
        public int width { get; set; }
        // hauteur du terrain = nombre de lignes
        public int height { get; set; }

        // Line to fill
        public int Line { get; set; }


        public List<point> final;

        // Terrain
        public point[,] field;

        public SpoonProcessor(int _width, int _height)
        {
            width = _width;
            height = _height;
            Line = 0;
            field = new point[height, width];
        }

        public void MapLine(string row)
        {
            for (int j = 0; j < width; j++)
            {
                if (row[j] == '.')
                    field[Line, j] = new point(Line, j, false);
                if (row[j] == '0')
                    field[Line, j] = new point(Line, j, true);
            }

            Line += 1;
        }

        public void FindNeighbour ()
        {

            foreach (point p in field)
            {
                if (p.IsNode)
                {
                    StringBuilder S = new StringBuilder();

                    // Recherche Horizontale
                    for (int i = p.Y + 1; i < width; i++)
                    {
                        if (i == width - 1 && field[p.X, i].IsNode == false)
                        {
                            S.Append(" -1 -1");
                            break;
                        }
                        if (i >= width)
                            break;
                        if (field[p.X, i].IsNode)
                        {
                            S.Append($" {i} {p.X}");
                            break;
                        }
                    }
                    // Recherche Verticale
                    for (int i = p.X + 1; i < height; i++)
                    {

                        if (i == height - 1 && field[i, p.Y].IsNode == false)
                        {
                            S.Append(" -1 -1");
                            break;
                        }

                        if (i >= height)
                            break;
                        if (field[i, p.Y].IsNode)
                        {
                            S.Append($" {p.Y} {i}");
                            break;
                        }
                    }

                    Console.WriteLine($"{p.Y} {p.X}" + S.ToString());


                }

            }
        }

        public void Display()
        {
            for (int i = 0; i < height; i++)
            {
                for (int j = 0; j < width; j++)
                {

                    if (field[i, j] != null && field[i, j].IsNode)
                        Console.Error.Write("0");
                    else
                        Console.Error.Write(".");
                }
                Console.Error.WriteLine();
            }
        }
    }

}
